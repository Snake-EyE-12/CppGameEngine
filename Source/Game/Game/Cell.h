#pragma once
#include "Framework/Actor.h"
#include "Core/Vector2.h"
#include "Renderer/Font.h"
#include "Renderer/Text.h"
#include "Framework/Actor.h"

namespace cg
{
	class Cell : public cg::Actor
	{
	public:
		Cell(bool* restart, Vector2 pos, bool isBomb, const cg::Transform& transform, std::shared_ptr<cg::Model> model) :
			Actor{ transform, model },
			m_bomb{ isBomb },
			m_pos{ pos },
			m_restart{ restart }
		{};
		void Reveal(int value);
		void Update(float dt) override;
		void Draw(cg::Renderer& renderer) override;
		bool inRange();
		int bombsInRadius(int x, int y);
		void revealZero(int x, int y);
		bool* m_restart;
	private:
		bool m_bomb = false;
		bool m_revealed = false;
		bool m_flagged = false;
		Vector2 m_pos;
		std::unique_ptr<cg::Text> m_text = std::make_unique<cg::Text>(std::make_shared<cg::Font>("bit.ttf", 24));
	public:
		constexpr static const bool matrix[23][36] = {
			{1,1,1,0,1,0,1,0,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1},
			{0,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,1,0,0,1,1,0},
			{0,1,0,0,1,0,1,0,1,1,1,0,0,1,0,1,0,1,1,1,0,1,0,1,0,1,1,0,0,1,1,1,0,1,0,1},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,1,1,0,1,0,1,0,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0},
			{0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
			{1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{1,0,1,0,1,1,1,0,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,1,1,1,0},
			{1,1,1,0,0,1,0,0,1,0,0,1,0,0,0,1,1,0,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,1,1,0},
			{1,1,1,0,1,1,1,0,1,1,0,1,1,0,0,1,1,1,0,1,0,1,0,1,1,0,0,0,1,1,1,0,1,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0},
			{0,1,0,0,1,0,1,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0},
			{1,1,1,0,1,0,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
			{0,0,1,0,1,0,1,0,0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0},
			{1,0,1,0,1,0,1,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
			{1,1,1,0,1,1,1,0,1,1,0,0,0,1,0,0,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{1,1,1,0,1,0,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0},
			{0,1,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0},
			{0,1,0,0,1,0,1,0,1,1,1,0,1,1,0,0,0,1,1,1,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0}
		};
	};
}